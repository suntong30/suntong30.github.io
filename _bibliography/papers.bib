---
---

@string{aps = {American Physical Society,}}

@article{UpChain2024tong,
  abbr={TMC},
  abbr2={TH-CPL A},
  abbr3={CCF A},
  title={UpChain: Securing Incremental Updates for IoT Devices with Blockchain},
  author={Sun, Tong and Lv, Jiamei and Gao, Yi and Dong, Wei},
  journal={Under Review in IEEE Transactions on Mobile Computing (TMC)},
  selected={false},
  year={2024},
}
@article{sdiff2024tong,
  abbr={TMC},
  abbr2={TH-CPL A},
  abbr3={CCF A},
  title={Understanding Differencing Algorithms for Mobile Application Updates},
  author={Sun, Tong and Jiang, Bowen and Jin, Lewei and Zhang, Wenzhao and Gao, Yi and Li, Zhendong and Dong, Wei},
  journal={IEEE Transactions on Mobile Computing (TMC)},
  abstract={Mobile application updates occur frequently, and they continue to add considerable traffic over the Internet.  Differencing algorithms, which compute a small delta between the new version and the old version, are often employed to reduce the update overhead. Researchers have proposed many differencing algorithms over the years. Unfortunately, it is currently unknown how these algorithms quantitatively perform for different categories of applications. It is also challenging to know the impacts of different techniques and whether a technique in one algorithm can be integrated into another algorithm for further performance improvement.
This paper conducts the first systematic study to understand the performance of four widely used differencing algorithms for mobile application updates, including xdelta3, bsdiff, archive patcher, and HDiffPatch with respect to five key metrics, including compression ratio, differencing time/memory overhead, and reconstruction time/memory overhead.  We perform measurements for 200 mobile applications, and analyze key techniques (such as decompressing-before-differencing, sliding window, and copy instructions merging)  that influence the performance of these algorithms.  We have provided four important findings which give insights to further optimize for performance improvement. Guided by these insights, we have also proposed a novel algorithm, sdiff, which achieves the smallest compression ratio to state-of-the-art algorithms by combining an appropriately chosen set of key techniques.},
  pdf={TMC24_sdiff.pdf},
  selected={true},
  year={2024},
}
@article{SimEnc2024tong,
  abbr={ATC'24},
  abbr2={TH-CPL A},
  abbr3={CCF A},
  title={SimEnc: A High-Performance Similarity-Preserving Encryption Approach for Deduplication of Encrypted Docker Images},
  author={Sun, Tong and Jiang, Bowen and Li, Borui and Lv, Jiamei and Gao, Yi and Dong, Wei},
  journal={In Proc. of USENIX ATC},
  note={Acceptance Rate: 15.8% (77 out of 488)},
  selected={true},
  year={2024},
}
@article{dTEE2024tong,
  abbr={IPSN'24},
  abbr2={TH-CPL A},
  abbr3={CCF B},
  title={dTEE: A Declarative Approach to Secure IoT Applications Using TrustZone},
  author={Sun, Tong and Li, Borui and Teng, Yixiao and Gao, Yi and Dong*, Wei},
  journal={In Proc. of ACM/IEEE IPSN},
  note={Acceptance Rate: 21.5% (20 out of 93)},
  abstract={Internet of Things (IoT) applications have recently been widely used in safety-critical scenarios. To prevent sensitive information leaks, IoT device vendors provide hardware-assisted protections, called Trusted Execution Environments (TEEs), like ARM TrustZone. Programming a TEE-based application requires separate code for two components, significantly slowing down the development process. Existing solutions tackle this issue by automatic code partition while not successfully applying it in two complicated scenarios: adding trusted logic and interactions with secure peripherals. We propose dTEE, a declarative approach to secure IoT applications based on TrustZone. dTEE proposes a rapid approach that enables developers to declare tiered-sensitive variables and functions of existing applications. Besides, dTEE automatically transforms device drivers into trusted ones. We evaluate dTEE on four real world IoT applications and seven micro-benchmarks. Results show that dTEE achieves high expressiveness for supporting 50% more applications than existing approaches and reduces 90% of the lines of code against handcrafted development.},
  pdf={IPSN24_dTEE.pdf},
  selected={true},
  year={2024},
}
@article{MDiffPatch2024tong,
  abbr={INFOCOM'24},
  abbr2={TH-CPL A},
  abbr3={CCF A},
  title={Exploiting Multiple Similarity Spaces for Efficient and Flexible Incremental Update of Mobile Apps},
  author={Jin, Lewei and Dong*, Wei and Jiang, Bowen and Sun, Tong and Gao*, Yi},
  journal={In Proc. of IEEE INFOCOM},
  note={Acceptance Rate: 19.6% (256 out of 1307)},
  pdf={INFOCOM24_MDiffPatch.pdf},
  year={2024},
}




